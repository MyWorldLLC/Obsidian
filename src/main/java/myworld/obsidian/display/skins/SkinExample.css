@extend "some-other-skin" /* Extend a base skin - that will result in taking all component
 definitions and style rules from that skin and overwriting them with the definitions in this
 skin.
 */
@import "skin-base.css" /* Import a base CSS file defining base rules/variables. */

  /*
    The @component-name block defines a "component interface" - a set of typed variables
    that can be passed to the style engine that define something useful about the visual
    state of the component. Non-optional variables that are not passed by the component
    using this skin should generate a warning when debug mode is enabled on the UI.
  */
@component-name {
  text: string;
  display: image;
  mask: color;
  hover: boolean?; /* A trailing ? means the variable is optional and will not generate a warning if missing */
}

/* > selectors on the component define a layer. Layers are rendered in declared order.
   Name is only significant for debug purposes.
*/
component-name > background {
  classes: class-1, class-2, class-3; /* Apply definitions from the given set of classes */
  geometry: rounded-rectangle(95%, 90%, 5px);
  position: 0;
  /* image-typed inputs are blitted as a color map, multiple colors are rendered one over the
  	 other (allows stacking visual color effects)
  */
  color: display color var('somevar'); /* Interface variables are just used directly, skin variables declared with @var need to be referenced via the var() function */
  border-color: white;
  border-width: 2%;
  border-position: 0;
}

component-name > text {
  geometry: text; /* string-typed inputs get rendered as text */
  color: black;
}

/* boolean-typed inputs are useable as pseudoclasses */
component-name:hover {
  classes: all-hover
}

@var("somevar", color('#AAFFAA55')) /* Variables can be defined anywhere, imported, etc. */

some-other-class {
  /* Utility classes can be defined anywhere, imported, etc. too */
}